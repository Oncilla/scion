// Copyright 2018 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sibra

import (
	"fmt"
	"testing"

	. "github.com/smartystreets/goconvey/convey"

	"github.com/scionproto/scion/go/lib/common"
)

// Interface assertions
var _ fmt.Stringer = (*SteadyExtn)(nil)

var (
	fnLeaf         = "testdata/ISD1-AS10-V1.leaf"
	fnNoIndentLeaf = "testdata/noindent.leaf"

	rawSignature = common.RawBytes{0xdf, 0xa7, 0x61, 0xa1, 0xb5, 0x6c, 0x3c, 0x1b, 0x7a, 0x52,
		0x53, 0x02, 0x66, 0xd9, 0x98, 0x1e, 0x82, 0x89, 0x6e, 0xe4, 0xb7, 0x31, 0xb6, 0x4d,
		0xbe, 0xed, 0xb8, 0x9c, 0x0f, 0xa4, 0xb7, 0xbf, 0x34, 0x6d, 0xfe, 0x19, 0x7a, 0x72,
		0x2b, 0x7a, 0xeb, 0xe7, 0xc6, 0x98, 0x48, 0xc6, 0xe2, 0x37, 0xdb, 0xb7, 0x01, 0xa1,
		0xe0, 0xec, 0x07, 0xe4, 0xe0, 0xd4, 0x4b, 0xd2, 0x3e, 0x7c, 0x04, 0x06}

	rawEncKey = common.RawBytes{0x9c, 0xfd, 0x47, 0x91, 0x9c, 0x24, 0x5b, 0xcb, 0xa3, 0xa9,
		0xe1, 0x0e, 0xf3, 0x64, 0x5b, 0xf5, 0xc3, 0x7a, 0x01, 0x5a, 0x85, 0x3c, 0xed, 0x54,
		0x22, 0x2c, 0xa9, 0x75, 0x95, 0x3e, 0x74, 0x72}

	rawSigKey = common.RawBytes{0xe5, 0x86, 0x28, 0xfc, 0x38, 0xe8, 0xaf, 0xc2, 0xa8, 0x50,
		0xf6, 0xdc, 0x1b, 0xcf, 0x66, 0xd2, 0xc3, 0x97, 0x6e, 0x16, 0xb1, 0x53, 0xfc, 0x2c,
		0x7a, 0xb5, 0x5f, 0xed, 0x7e, 0x30, 0xd1, 0x6e}

	rawSetupReq = common.RawBytes{
		//f  SOFidx  P0    p1    p2
		0xec, 0x01, 0x0a, 0x00, 0x00,
		// Path ID
		0x00, 0x10, 0x00, 0x0a, 0x2e, 0xdb, 0xb3, 0x10,
		// Resv info block
		//----- exp tick ----- bwfwd bwrev flags  fHop
		0x04, 0x48, 0x8c, 0xd1, 0x01, 0x01, 0x28, 0x00,
		// SOFs
		// ingress    egress    -------- mac --------
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
)

func Test_SteadyExtnFromRaw(t *testing.T) {
	Convey("CertificateFromRaw should parse bytes correctly", t, func() {
		s, err := SteadyExtnFromRaw(rawSetupReq)
		SoMsg("err", err, ShouldEqual, nil)
		SoMsg("expTick", s.ResvRequest.Info.ExpTick, ShouldEqual, 0x04488cd1)
		SoMsg("Ingress", s.ResvRequest.OpFields[0].Ingress, ShouldEqual, 0x0102)
		SoMsg("Egress", s.ResvRequest.OpFields[0].Egress, ShouldEqual, 0x0304)
	})
}

func Test_NewSteadySetup(t *testing.T) {
	Convey("CertificateFromRaw should parse bytes correctly", t, func() {
		pathId := []uint8{0x00, 0x10, 0x00, 0x0a, 0x2e, 0xdb, 0xb3, 0x10}
		bw := BWPair{Fwd: BwClass(1), Rev: BwClass(1)}
		s, err := NewSteadySetup(0x04488cd1, bw, pathId, 10)

		SoMsg("err", err, ShouldEqual, nil)
		SoMsg("expTick", s.ResvRequest.Info.ExpTick, ShouldEqual, 0x04488cd1)
		SoMsg("Ingress", s.ResvRequest.OpFields[0].Ingress, ShouldEqual, 0x0102)
		SoMsg("Egress", s.ResvRequest.OpFields[0].Egress, ShouldEqual, 0x0304)
	})
}
